set 8--Takes adjacent elements in an array, 1 by 1 and it swaps them if they are out of order, it does this for the whole array N-1 times;;Bubble::Finds minimum in array, swaps it into the first position of the array. It continues this for the whole array until the array is sorted, ignoring already sorted elements. It does this N-1 times;;Selection::The array is divided into a sorted piece and an unsorted piece, one by one elements adjacent to the sorted piece get sorted into the sorted portion. Sorted array grows by 1 every iteration and unsorted array shrinks by 1;;Insertion::Instead of making several small jumps it makes large jumps that are h elements away, h shrinks on each operation until h is 1 and the array is sorted;;Shell::Heapifies a set of data, then removes the max N-1 times, the array that is left is sorted;;Heap::Sets a pivot element, then goes through the list and sorts them, Every number smaller then the pivot goes to the left, every element bigger goes to the right. Left and right are sorted with a scanner that looks for an element that doesn't fit on that side of the pivot, Once these two elements are found they get swapped. Once the scanners meet it creates a new pivot;;Quicksort::In order tree traversal;;LSR::Pre order tree traversal;;SLR::Post order tree traversal;;LRS::